import os
from datetime import datetime
from typing import Union

import requests

from .models import TelegramUser


class TronTransactionAnalyzer:
    API_ENDPOINT = os.environ.get("API_ENDPOINT")
    API_KEY = os.environ.get("API_KEY")
    STAS_TRC20_WALLET_ADDRESS = os.environ.get("STAS_TRC20_WALLET_ADDRESS")

    @staticmethod
    def convert_string_to_trc20(amount_str: str, decimals: int) -> int:
        return int(int(amount_str) / (10**decimals))

    @staticmethod
    def convert_timestamp_to_date_format(timestamp: int) -> datetime:
        # Convert milliseconds to seconds
        timestamp_seconds = timestamp / 1000

        # Convert timestamp to datetime object
        date_time = datetime.fromtimestamp(timestamp_seconds)

        # Get the date from the timestamp
        date_from_timestamp = date_time.date()

        return date_from_timestamp

    @staticmethod
    def check_transaction_was_today(transaction_date: datetime) -> bool:
        # Get today's date
        today_date = datetime.today().date()

        if transaction_date == today_date:
            print("The date of transaction is today.")
            return True
        else:
            print("The date of transaction is not today.")
            return False

    @classmethod
    def validate_tx_hash(cls, tx_hash: str, plan_price: int) -> bool:
        # is_valid = False
        url = f"{cls.API_ENDPOINT}={tx_hash}"
        headers = {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "TRON-PRO-API-KEY": f"{cls.API_KEY}",
        }

        try:
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                valid_data = response.json()
                transaction_date = (
                    TronTransactionAnalyzer.convert_timestamp_to_date_format(
                        valid_data["timestamp"]
                    )
                )
                if TronTransactionAnalyzer.check_transaction_was_today(
                    transaction_date=transaction_date
                ):
                    for transfer_info in valid_data["trc20TransferInfo"]:
                        if transfer_info["to_address"] != cls.STAS_TRC20_WALLET_ADDRESS:
                            print(
                                f"Stanislav Ivankin {cls.STAS_TRC20_WALLET_ADDRESS} didn't get your USDT!",
                                False,
                            )
                            return False
                        else:
                            amount_usdt = cls.convert_string_to_trc20(
                                transfer_info["amount_str"], transfer_info["decimals"]
                            )
                            if amount_usdt >= plan_price:
                                result = {
                                    "tx_hash": tx_hash,
                                    "to_address": transfer_info["to_address"],
                                    "amount_usdt": amount_usdt,
                                    "subscription_price": plan_price,
                                }
                                print(result, True)
                                return True
                            else:
                                result = {
                                    "tx_hash": tx_hash,
                                    "to_address": transfer_info["to_address"],
                                    "amount_usdt": amount_usdt,
                                    "subscription_price": plan_price,
                                }
                                print(result, False)
                                return False
                else:
                    print(False)
                    return False
            else:
                print(f"Error: {response.status_code}")
                return False
        except Exception as e:
            print(f"Error occurred: {e}")
            return False


class TelegramMessageSender:
    TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")

    @classmethod
    def send_message_to_chat(
        cls, message: str, chat_id: Union[int, str]
    ) -> requests.Response:
        url = f"https://api.telegram.org/bot{cls.TELEGRAM_BOT_TOKEN}/sendMessage"
        params = {"chat_id": chat_id, "text": message}

        response = requests.post(url=url, params=params)
        if response.status_code == 200:
            print("Message sent successfully!")
        else:
            print("Failed to send message:", response.text)
        return response

    @classmethod
    def send_message_with_photo_to_chat(
        cls, message: str, photo_path: str, chat_id: Union[int, str]
    ) -> requests.Response:
        url = f"https://api.telegram.org/bot{cls.TELEGRAM_BOT_TOKEN}/sendPhoto"
        files = {"photo": open(photo_path, "rb")}
        params = {"chat_id": chat_id, "caption": message}

        response = requests.post(url=url, params=params, files=files)
        if response.status_code == 200:
            print("Message with photo sent successfully!")
        else:
            print("Failed to send message with photo:", response.text)
        return response

    def create_message_about_add_user(
        admin_of_group: TelegramUser,
        telegram_username: str,
        subscription_start_date: str,
        subscription_end_date: str,
        subscription_plan: str,
        subscription_price: int,
        tx_hash: str,
    ) -> str:

        message = (
            f"Hi, {admin_of_group}!\n\n"
            f"Action: üü¢ add to private group\n\n"
            f"Subscription Details üìÅ\n"
            f"--------------------------------------\n"
            f"User: @{telegram_username}\n"
            f"--------------------------------------\n"
            f"Purchased on: {subscription_start_date}\n"
            f"--------------------------------------\n"
            f"Will expire on: {subscription_end_date}\n"
            f"--------------------------------------\n"
            f"Subscription plan: {subscription_plan}\n"
            f"--------------------------------------\n"
            f"Subscription price: {subscription_price} USDT\n"
            f"--------------------------------------\n"
            f"Hash: https://tronscan.org/#/transaction/{tx_hash}\n\n"
            "Click the link to copy the transaction hash."
        )

        return message

    def create_message_about_delete_user(
        admin_of_group: TelegramUser,
        telegram_username: str,
        subscription_start_date: str,
        subscription_end_date: str,
        subscription_plan: str,
        subscription_price: int,
        tx_hash: str,
    ) -> str:
        message = (
            f"Hi, {admin_of_group}!\n\n"
            f"Action: üî¥ delete from private group\n\n"
            f"Subscription Details üìÅ\n"
            f"--------------------------------------\n"
            f"User: @{telegram_username}\n"
            f"--------------------------------------\n"
            f"Purchased on: {subscription_start_date}\n"
            f"--------------------------------------\n"
            f"Expired on: {subscription_end_date}\n"
            f"--------------------------------------\n"
            f"Subscription plan: {subscription_plan}\n"
            f"--------------------------------------\n"
            f"Subscription price: {subscription_price} USDT\n"
            f"--------------------------------------\n"
            f"Hash: https://tronscan.org/#/transaction/{tx_hash}\n\n"
            "Click the link to copy the transaction hash."
        )

        return message

    def create_message_about_keep_user(
        admin_of_group: TelegramUser,
        telegram_username: str,
        subscription_start_date: str,
        subscription_end_date: str,
        subscription_plan: str,
        subscription_price: int,
        tx_hash: str,
    ) -> str:
        message = (
            f"Hi, {admin_of_group}!\n\n"
            f"Action: üü° keep in private group\n\n"
            f"Subscription Details üìÅ\n"
            f"--------------------------------------\n"
            f"User: @{telegram_username}\n"
            f"--------------------------------------\n"
            f"Extended on: {subscription_start_date}\n"
            f"--------------------------------------\n"
            f"Will expire on: {subscription_end_date}\n"
            f"--------------------------------------\n"
            f"Subscription plan: {subscription_plan}\n"
            f"--------------------------------------\n"
            f"Subscription price: {subscription_price} USDT\n"
            f"--------------------------------------\n"
            f"Hash: https://tronscan.org/#/transaction/{tx_hash}\n\n"
            "Click the link to copy the transaction hash."
        )

        return message

    def create_message_about_reminder(
        telegram_username: str,
        subscription_plan: str,
        subscription_start_date: str,
        subscription_end_date: str,
        subscription_price: int,
        day: int,
        syntax_word: str,
    ):
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, @{telegram_username}!\n\n"
            f"–ü–∏—à—É —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ —Ç–æ–º, —á—Ç–æ —É —Ç–µ–±—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ {day} {syntax_word} –Ω–∞ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ ¬´–ë–∞—Ñ—Ñ–µ—Ç—ã –Ω–∞ –£–æ—Ä–∞–Ω–Ω–∞—Ö¬ª\n\n"
            f"–ü—Ä–æ–¥–ª–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ –±—ã –≤–Ω–µ–∑–∞–ø–Ω–æ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–∞–Ω–µ–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π. –ê —Ç–∞–∫–∂–µ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—É—é –≤–∞–º–∏ —Ä–∞–Ω–Ω–µ–µ –ø–æ–¥–ø–∏—Å–∫—É. –í–æ—Ç –µ–µ –¥–µ—Ç–∞–ª–∏:\n"
            f"-------------------------------------\n"
            f"–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_plan}\n"
            f"-------------------------------------\n"
            f"–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {subscription_start_date}\n"
            f"-------------------------------------\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {subscription_end_date}\n"
            f"-------------------------------------\n"
            f"–¶–µ–Ω–∞: {subscription_price} USDT\n"
            f"-------------------------------------\n\n"
            f"–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–±—Ä–∞–≤ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ –∏ –æ–ø–ª–∞—Ç–∏–≤ –µ–≥–æ. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É –ø–ª–∞–Ω—É.\n\n"
            f"–î–ª—è –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –Ω–∞ –ø—É—Ç–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–∏–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø–æ –∫—Ä–∏–ø—Ç–µ. –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É, –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–æ —Ç—ã —Ä–∞–Ω–µ–µ —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞–ª.\n\n"
            f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞ @BaffetConcierge"
        )

        return message

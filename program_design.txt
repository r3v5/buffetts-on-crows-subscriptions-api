------------------------------------------------------------------------------------------------------------------------
Celery tasks:
------------------------------------------------------------------------------------------------------------------------
- Delete subscription after end_date happened
- frequency: every 10 seconds

Program delete_subscription():
    1. get subscriptions filtering by now date == end_date
    2. delete subscriptions
    3. delete TelegramUser from the group after 1 hour
    4. and then set TelegramUser.at_private_group = False
------------------------------------------------------------------------------------------------------------------------
- Add users to private group group after thet bought subscription
- frequency: every 10 seconds

Programm add_users_to_group():
    1. get subscriptions by users that have at_private_group = False
    2. make request to telegram api to add user by telegram_username to private group in Telegram
------------------------------------------------------------------------------------------------------------------------
- Sending reminders about the end of a paid subscription with an offer to extend the next month 
- reminders for 7 days before the end
- frequency: every 10 seconds

Program send_reminder_for_7_days_before_the_end():
    1. get subscriptions that will end after 7 days and prefetch with associated TelegramUser's chat_id 
    2. send message to every user by chat_id: f'Ваша подписка закончится через 7 дней: {end_date}'
---------------------------------------------------------------------------------------------------------------------
- Sending reminders about the end of a paid subscription with an offer to extend the next month 
- reminders for 3 days before the end
- frequency: every 10 seconds

Program send_reminder_for_3_days_before_the_end():
    1. get subscriptions that will end after 3 days and prefetch with associated TelegramUser's chat_id 
    2. send message to every user by chat_id: f'Ваша подписка закончится через 3 дня: {end_date}'
---------------------------------------------------------------------------------------------------------------------
- Sending reminders about the end of a paid subscription with an offer to extend the next month 
- reminders for 1 day before the end
- frequency: every 10 seconds

Program send_reminder_for_1_day_before_the_end():
    1. get subscriptions that will end after 1 day and prefetch with associated TelegramUser's chat_id 
    2. send message to every user by chat_id: f'Ваша подписка закончится через 1 дeнь: {end_date}'
---------------------------------------------------------------------------------------------------------------------
- Sending different alert about private community 
- frequency: every 24 hours

Program send_alert_from_private_group():
    1. Try to fetch some alert from Alert table in db
    2. If alert exists, get object of Alert else return response 404 NOT FOUND
    3. get TelegramUser's chat_id filter at_private_group = False
    4. send object of Alert to all chat_ids of users
    5. delete object of Alert
------------------------------------------------------------------------------------------------------------------------
Additional models:
------------------------------------------------------------------------------------------------------------------------
Alert:
    text: CharField
    photo: ImageField